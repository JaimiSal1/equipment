{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/artagan/Desktop/equipment/web-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _objectSpread from\"/home/artagan/Desktop/equipment/web-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/**\n * Update the application's client-side global state.  Call via `dispatch`.\n */export default function reducer(state,action){switch(action.type){case'connection_change':return _objectSpread({},state,{connected:action.status});case'update_cue':return _objectSpread({},state,{cue:action.cue});case'update_cue_list':return _objectSpread({},state,{cues:action.cues});case'update_channel':return update_channel(state,action.value);case'update_channels':return update_channels(state,action.values);case'update_lists':return update_lists(state,action.lists);case'switch_list':return switch_list(state,action.id);}}/**\n * Updates the application's client-side global state when a channel is changed.\n */function update_channel(state,value){if(value.value<0||value.value>255)return state;var faders=state.faders.map(function(fader){if(fader.channel===value.channel){return{channel:fader.channel,value:value.value,status:value.status};}else{return fader;}});return _objectSpread({},state,{faders:faders});}function update_channels(state,values){var new_faders=values;var channels=new_faders.map(function(x){return x.channel;});var _iterator=_createForOfIteratorHelper(state.faders),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var channel=_step.value;if(channels.indexOf(channel.channel)===-1){channel.value=0;channel.status=\"manual\";new_faders.push(channel);channels.push(channel.channel);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return _objectSpread({},state,{faders:new_faders});}function update_lists(state,new_lists){var lists={id:state.lists.id,name:\"loading\",lists:new_lists};var _iterator2=_createForOfIteratorHelper(lists.lists),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var l=_step2.value;if(l.id===state.lists.id){lists.name=l.name;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return _objectSpread({},state,{lists:lists});}function switch_list(state,id){var lists={id:id,name:\"loading\",lists:state.lists.lists};var _iterator3=_createForOfIteratorHelper(lists.lists),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var l=_step3.value;if(l.id===state.lists.id){lists.name=l.name;}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return _objectSpread({},state,{lists:lists});}","map":{"version":3,"sources":["/home/artagan/Desktop/equipment/web-frontend/src/reducer.ts"],"names":["reducer","state","action","type","connected","status","cue","cues","update_channel","value","update_channels","values","update_lists","lists","switch_list","id","faders","map","fader","channel","new_faders","channels","x","indexOf","push","new_lists","name","l"],"mappings":"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","sourcesContent":["import Action, {Channel, CueList} from './action';\nimport {AppState} from './components/App/App';\n\n/**\n * Update the application's client-side global state.  Call via `dispatch`.\n */\nexport default function reducer(state: AppState, action: Action): AppState {\n  switch (action.type) {\n    case 'connection_change':\n      return {...state, connected: action.status};\n    case 'update_cue':\n      return {...state, cue: action.cue};\n    case 'update_cue_list':\n      return {...state, cues: action.cues};\n    case 'update_channel':\n      return update_channel(state, action.value);\n    case 'update_channels':\n      return update_channels(state, action.values);\n    case 'update_lists':\n      return update_lists(state, action.lists);\n    case 'switch_list':\n      return switch_list(state, action.id);\n  }\n}\n\n/**\n * Updates the application's client-side global state when a channel is changed.\n */\nfunction update_channel(state: AppState, value: Channel): AppState {\n  if (value.value < 0 || value.value > 255) return state;\n  let faders = state.faders.map((fader) => {\n    if (fader.channel === value.channel) {\n      return {\n        channel: fader.channel,\n        value: value.value,\n        status: value.status,\n      }\n    } else {\n      return fader;\n    }\n  });\n  return {\n    ...state,\n    faders,\n  };\n}\n\nfunction update_channels(state: AppState, values: Channel[]): AppState {\n  let new_faders = values;\n  let channels = new_faders.map(x => x.channel);\n  for (let channel of state.faders) {\n    if (channels.indexOf(channel.channel) === -1) {\n      channel.value = 0;\n      channel.status = \"manual\";\n      new_faders.push(channel);\n      channels.push(channel.channel);\n    }\n  }\n  return {...state, faders: new_faders};\n}\n\nfunction update_lists(state: AppState, new_lists: CueList[]): AppState {\n  let lists = {\n    id: state.lists.id,\n    name: \"loading\",\n    lists: new_lists,\n  }\n  for (let l of lists.lists) {\n    if (l.id === state.lists.id) {\n      lists.name = l.name;\n    }\n  }\n  return {...state, lists};\n}\n\nfunction switch_list(state: AppState, id: number): AppState {\n  let lists = {\n    id,\n    name: \"loading\",\n    lists: state.lists.lists,\n  }\n  for (let l of lists.lists) {\n    if (l.id === state.lists.id) {\n      lists.name = l.name;\n    }\n  }\n  return {...state, lists};\n}\n"]},"metadata":{},"sourceType":"module"}