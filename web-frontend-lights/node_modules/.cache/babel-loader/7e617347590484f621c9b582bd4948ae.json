{"ast":null,"code":"const SERVER_URL = 'wss://localhost:8000';\nexport default class Server {\n  constructor(dispatch, list_id) {\n    this.socket = void 0;\n    this.dispatch = void 0;\n    this.disconnect_timeout = void 0;\n    this.list_id = void 0;\n    this.dispatch = dispatch;\n    this.socket = this.connect();\n    this.list_id = list_id;\n  }\n\n  connect() {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      return this.socket;\n    }\n\n    let socket = new WebSocket(SERVER_URL, ['rejectUnauthorized', 'false']);\n\n    socket.onmessage = evt => this.onmessage(evt.data);\n\n    socket.onopen = () => this.onopen();\n\n    socket.onclose = () => {\n      if (this.disconnect_timeout === undefined) {\n        this.disconnect_timeout = window.setTimeout(() => {\n          this.dispatch({\n            type: 'connection_change',\n            status: false\n          });\n        }, 1000);\n      }\n\n      setTimeout(() => {\n        this.socket = this.connect();\n      }, 100);\n    };\n\n    socket.onerror = () => {\n      socket.close();\n    };\n\n    this.socket = socket;\n    return socket;\n  }\n\n  disconnect() {\n    console.log(\"disconnect\");\n\n    this.onmessage = () => {};\n\n    if (this.socket) {\n      this.socket.onclose = () => {};\n\n      this.socket.close();\n    }\n  }\n\n  onopen() {\n    window.clearTimeout(this.disconnect_timeout);\n    this.disconnect_timeout = undefined;\n    this.dispatch({\n      type: 'connection_change',\n      status: true\n    });\n    {\n      let data = {\n        type: 'get-levels',\n        list_id: this.list_id\n      };\n      this.socket.send(JSON.stringify(data));\n      data = {\n        type: 'list-cues',\n        list_id: this.list_id\n      };\n      this.socket.send(JSON.stringify(data));\n    }\n    {\n      let data = {\n        type: 'get-lists'\n      };\n      this.socket.send(JSON.stringify(data));\n    }\n  }\n\n  onmessage(data) {\n    try {\n      let msg = JSON.parse(data);\n\n      switch (msg.type) {\n        case 'get-levels':\n          this.get_levels(msg);\n          break;\n\n        case 'list-cues':\n          this.list_cues(msg);\n          break;\n\n        case 'get-lists':\n          this.get_lists(msg);\n          break;\n\n        default:\n          console.log(\"Unrecognized message type!\");\n      }\n    } catch {\n      console.error(\"Error while deserializing!\");\n    }\n  }\n\n  get_levels(msg) {\n    if (parseInt(msg.list) !== this.list_id) return;\n    let values = msg.values || [];\n    this.dispatch({\n      type: 'update_channels',\n      values: values.map(x => {\n        return {\n          channel: parseInt(x.channel),\n          value: parseInt(x.value),\n          status: x.status\n        };\n      })\n    });\n    this.dispatch({\n      type: 'update_cue',\n      cue: {\n        current: parseInt(msg.cue.current),\n        fade_time: parseFloat(msg.cue.fade_time),\n        fade_progress: parseFloat(msg.cue.fade_progress),\n        fading: msg.cue.fading === \"true\",\n        last: parseInt(msg.cue.last),\n        next: parseInt(msg.cue.next),\n        previous: parseInt(msg.cue.previous)\n      }\n    });\n  }\n\n  get_lists(msg) {\n    let lists = msg.lists || [];\n    this.dispatch({\n      type: 'update_lists',\n      lists: lists.map(x => {\n        return {\n          name: x.name,\n          id: parseInt(x.number)\n        };\n      })\n    });\n  }\n\n  list_cues(msg) {\n    if (parseInt(msg.list) !== this.list_id) return;\n    let cues = msg.cues || [];\n    this.dispatch({\n      type: 'update_cue_list',\n      cues: cues.map(x => {\n        return parseInt(x.number);\n      })\n    });\n  }\n\n  rename_list(list_id, name) {\n    list_id = Math.floor(list_id);\n    let data = {\n      type: 'rename-list',\n      list_id: this.list_id,\n      name\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  delete_list(list_id) {\n    list_id = Math.floor(list_id);\n    let data = {\n      type: 'delete-list',\n      list_id: this.list_id\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  reset_channel(channel) {\n    channel = Math.floor(channel);\n    let data = {\n      type: 'reset-channel',\n      list_id: this.list_id,\n      channel\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  block_channel(channel) {\n    channel = Math.floor(channel);\n    let data = {\n      type: 'block-channel',\n      list_id: this.list_id,\n      channel\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  track_channel(channel) {\n    channel = Math.floor(channel);\n    let data = {\n      type: 'track-channel',\n      list_id: this.list_id,\n      channel\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  set_level(channel, value) {\n    channel = Math.floor(channel);\n    value = Math.floor(value);\n    let data = {\n      type: 'set-levels',\n      list_id: this.list_id,\n      values: [{\n        channel,\n        value\n      }]\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  save_cue(cue, time) {\n    cue = Math.floor(cue);\n    let data = {\n      type: 'save-cue',\n      list_id: this.list_id,\n      cue,\n      time\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  delete_cue(cue) {\n    cue = Math.floor(cue);\n    let data = {\n      type: 'delete-cue',\n      list_id: this.list_id,\n      cue\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  restore_cue(cue) {\n    cue = Math.floor(cue);\n    let data = {\n      type: 'restore-cue',\n      list_id: this.list_id,\n      cue\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  go() {\n    let data = {\n      type: 'go-cue',\n      list_id: this.list_id\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  back() {\n    let data = {\n      type: 'back-cue',\n      list_id: this.list_id\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  save_to_disk() {\n    let data = {\n      type: 'save-to-disk'\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n}","map":{"version":3,"sources":["/home/artagan/Desktop/equipment/web-frontend/src/server.ts"],"names":["SERVER_URL","Server","constructor","dispatch","list_id","socket","disconnect_timeout","connect","readyState","WebSocket","OPEN","onmessage","evt","data","onopen","onclose","undefined","window","setTimeout","type","status","onerror","close","disconnect","console","log","clearTimeout","send","JSON","stringify","msg","parse","get_levels","list_cues","get_lists","error","parseInt","list","values","map","x","channel","value","cue","current","fade_time","parseFloat","fade_progress","fading","last","next","previous","lists","name","id","number","cues","rename_list","Math","floor","delete_list","reset_channel","block_channel","track_channel","set_level","save_cue","time","delete_cue","restore_cue","go","back","save_to_disk"],"mappings":"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","sourcesContent":["import {Dispatch} from 'react';\nimport Action from './action';\n\nconst SERVER_URL: string = 'wss://localhost:8000';\n\ntype GetLevels = {\n  type: 'get-levels',\n  list: string,\n  cue: {\n    'current': string,\n    'fade_time': string,\n    'fade_progress': string,\n    'fading': string,\n    'last': string,\n    'next': string,\n    'previous': string,\n  },\n  values: [\n    {\n      'channel': string,\n      'value': string,\n      status: 'manual' | 'lowered' | 'raised' | 'tracked' | 'blocked';\n    }\n  ]\n};\n\ntype GetLists = {\n  type: 'get-lists',\n  lists: [\n    {\n      'number': string,\n      'name': string,\n    }\n  ]\n};\n\ntype ListCues = {\n  type: 'list-cues',\n  list: string,\n  cue: string,\n  cues: [\n    {\n      'number': string,\n    }\n  ]\n};\n\ntype Message = GetLevels | GetLists | ListCues;\n\nexport default class Server {\n  socket: WebSocket;\n  dispatch: Dispatch<Action>;\n  disconnect_timeout?: number;\n  list_id: number;\n\n  constructor(dispatch: Dispatch<Action>, list_id: number) {\n    this.dispatch = dispatch;\n    this.socket = this.connect();\n    this.list_id = list_id;\n  }\n\n  private connect() {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      return this.socket;\n    }\n    let socket = new WebSocket(SERVER_URL, [ 'rejectUnauthorized', 'false' ] );\n    socket.onmessage = (evt) => this.onmessage(evt.data);\n    socket.onopen = () => this.onopen();\n    socket.onclose = () => {\n      if (this.disconnect_timeout === undefined) {\n        this.disconnect_timeout = window.setTimeout(() => {\n          this.dispatch({type: 'connection_change', status: false});\n        }, 1000);\n      }\n      setTimeout(() => {\n        this.socket = this.connect();\n      }, 100);\n    }\n    socket.onerror = () => {\n      socket.close();\n    }\n    this.socket = socket;\n    return socket;\n  }\n\n  public disconnect() {\n    console.log(\"disconnect\");\n    this.onmessage = () => {};\n    if (this.socket) {\n      this.socket.onclose = () => {};\n      this.socket.close();\n    }\n  }\n\n  private onopen() {\n    window.clearTimeout(this.disconnect_timeout);\n    this.disconnect_timeout = undefined;\n    this.dispatch({type: 'connection_change', status: true});\n    {\n      let data = {type: 'get-levels', list_id: this.list_id};\n      this.socket.send(JSON.stringify(data));\n      data = {type: 'list-cues', list_id: this.list_id};\n      this.socket.send(JSON.stringify(data));\n    }\n    {\n      let data = {type: 'get-lists'};\n      this.socket.send(JSON.stringify(data));\n    }\n  }\n\n  private onmessage(data: string) {\n    try {\n      let msg: Message = JSON.parse(data);\n      switch (msg.type) {\n        case 'get-levels':\n          this.get_levels(msg);\n          break;\n        case 'list-cues':\n          this.list_cues(msg);\n          break;\n        case 'get-lists':\n          this.get_lists(msg);\n          break;\n        default:\n          console.log(\"Unrecognized message type!\");\n      }\n    } catch {\n      console.error(\"Error while deserializing!\");\n    }\n  }\n\n  private get_levels(msg: GetLevels) {\n    if (parseInt(msg.list) !== this.list_id) return;\n    let values = msg.values || [];\n    this.dispatch({\n      type: 'update_channels',\n      values: values.map((x) => {\n        return {\n          channel: parseInt(x.channel),\n          value: parseInt(x.value),\n          status: x.status,\n        }\n      }),\n    });\n    this.dispatch({\n      type: 'update_cue',\n      cue: {\n        current: parseInt(msg.cue.current),\n        fade_time: parseFloat(msg.cue.fade_time),\n        fade_progress: parseFloat(msg.cue.fade_progress),\n        fading: msg.cue.fading === \"true\",\n        last: parseInt(msg.cue.last),\n        next: parseInt(msg.cue.next),\n        previous: parseInt(msg.cue.previous),\n      }\n    });\n  }\n\n  private get_lists(msg: GetLists) {\n    let lists = msg.lists || [];\n    this.dispatch({\n      type: 'update_lists',\n      lists: lists.map((x) => {\n        return {\n          name: x.name,\n          id: parseInt(x.number)\n        }\n      }),\n    });\n  }\n\n  private list_cues(msg: ListCues) {\n    if (parseInt(msg.list) !== this.list_id) return;\n    let cues = msg.cues || [];\n    this.dispatch({\n      type: 'update_cue_list',\n      cues: cues.map((x) => {\n        return parseInt(x.number);\n      }),\n    });\n  }\n\n  rename_list(list_id: number, name: string) {\n    list_id = Math.floor(list_id);\n    let data = {\n      type: 'rename-list',\n      list_id: this.list_id,\n      name,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  delete_list(list_id: number) {\n    list_id = Math.floor(list_id);\n    let data = {\n      type: 'delete-list',\n      list_id: this.list_id,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  reset_channel(channel: number) {\n    channel = Math.floor(channel);\n    let data = {\n      type: 'reset-channel',\n      list_id: this.list_id,\n      channel,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  block_channel(channel: number) {\n    channel = Math.floor(channel);\n    let data = {\n      type: 'block-channel',\n      list_id: this.list_id,\n      channel,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  track_channel(channel: number) {\n    channel = Math.floor(channel);\n    let data = {\n      type: 'track-channel',\n      list_id: this.list_id,\n      channel,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  set_level(channel: number, value: number) {\n    channel = Math.floor(channel);\n    value = Math.floor(value);\n    let data = {\n      type: 'set-levels',\n      list_id: this.list_id,\n      values: [\n        {\n          channel,\n          value,\n        }\n      ]\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  save_cue(cue: number, time: number) {\n    cue = Math.floor(cue);\n    let data = {\n      type: 'save-cue',\n      list_id: this.list_id,\n      cue,\n      time,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  delete_cue(cue: number) {\n    cue = Math.floor(cue);\n    let data = {\n      type: 'delete-cue',\n      list_id: this.list_id,\n      cue,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  restore_cue(cue: number) {\n    cue = Math.floor(cue);\n    let data = {\n      type: 'restore-cue',\n      list_id: this.list_id,\n      cue,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  go() {\n    let data = {\n      type: 'go-cue',\n      list_id: this.list_id,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  back() {\n    let data = {\n      type: 'back-cue',\n      list_id: this.list_id,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  save_to_disk() {\n    let data = {\n      type: 'save-to-disk',\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}