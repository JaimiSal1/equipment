{"ast":null,"code":"var _jsxFileName = \"/home/artagan/Desktop/equipment/web-frontend/src/components/Fader/Fader.tsx\";\nimport React from 'react';\nimport './Fader.css';\n\n/**\n * Represents a basic one-channel input (e.g. a single channel's volume or a\n * single dimmer's intensity).\n */\nexport default function Fader({\n  state_modified,\n  data,\n  dispatch,\n  server\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Fader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"_text _\" + data.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, data.channel, \": \", Math.round(data.value / 255 * 100), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => hide_channel(data.channel, server),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, \"Hide\"), /*#__PURE__*/React.createElement(\"checkbox\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }\n  }, \"Mute\"), /*#__PURE__*/React.createElement(\"checkbox\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 3\n    }\n  }, \"Solo\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"_fader\",\n    type: \"range\",\n    min: \"0\",\n    max: \"255\",\n    value: data.value,\n    onChange: event => fader_changed(event.target, data, server, dispatch),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: data.status !== \"manual\",\n    onClick: () => server.reset_channel(data.channel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: state_modified || data.status === \"tracked\",\n    onClick: () => server.track_channel(data.channel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Track\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: state_modified || data.status !== \"tracked\",\n    onClick: () => server.block_channel(data.channel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Block\"));\n}\n/**\n * A fader was moved; dispatch the appropriate events to update the state.\n */\n\nfunction fader_changed(target, data, server, dispatch) {\n  server.set_level(data.channel, parseInt(target.value));\n  dispatch({\n    type: 'update_channel',\n    value: { ...data,\n      value: parseInt(target.value)\n    }\n  });\n}\n\nfunction hide_channel(channel, server) {\n  let confirmation = window.confirm(`Disabling channel ${channel} will hide it and turn off its output (over DMX or into the mixer). Please confirm.`);\n\n  if (confirmation) {\n    server.hide_channel(channel);\n  }\n}","map":{"version":3,"sources":["/home/artagan/Desktop/equipment/web-frontend/src/components/Fader/Fader.tsx"],"names":["React","Fader","state_modified","data","dispatch","server","status","channel","Math","round","value","hide_channel","event","fader_changed","target","reset_channel","track_channel","block_channel","set_level","parseInt","type","confirmation","window","confirm"],"mappings":";AAAA,OAAOA,KAAP,MAA8B,OAA9B;AAEA,OAAO,aAAP;;AAqBA;;;;AAIA,eAAe,SAASC,KAAT,CAAe;AAACC,EAAAA,cAAD;AAAiBC,EAAAA,IAAjB;AAAuBC,EAAAA,QAAvB;AAAiCC,EAAAA;AAAjC,CAAf,EAAqE;AAClF,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAE,YAAYF,IAAI,CAACG,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,CAACI,OADR,QACmBC,IAAI,CAACC,KAAL,CAAWN,IAAI,CAACO,KAAL,GAAW,GAAX,GAAiB,GAA5B,CADnB,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AACE,IAAA,OAAO,EAAE,MAAMC,YAAY,CAACR,IAAI,CAACI,OAAN,EAAeF,MAAf,CAD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAOJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPI,eAUJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVI,CADF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,eAgBE;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,GAAG,EAAC,GAHN;AAIE,IAAA,GAAG,EAAC,KAJN;AAKE,IAAA,KAAK,EAAEF,IAAI,CAACO,KALd;AAME,IAAA,QAAQ,EAAGE,KAAD,IAAWC,aAAa,CAACD,KAAK,CAACE,MAAP,EAAeX,IAAf,EAAqBE,MAArB,EAA6BD,QAA7B,CANpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,eAuBE;AACE,IAAA,QAAQ,EAAED,IAAI,CAACG,MAAL,KAAgB,QAD5B;AAEE,IAAA,OAAO,EAAE,MAAMD,MAAM,CAACU,aAAP,CAAqBZ,IAAI,CAACI,OAA1B,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAvBF,eA4BE;AACE,IAAA,QAAQ,EAAEL,cAAc,IAAIC,IAAI,CAACG,MAAL,KAAgB,SAD9C;AAEE,IAAA,OAAO,EAAE,MAAMD,MAAM,CAACW,aAAP,CAAqBb,IAAI,CAACI,OAA1B,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA5BF,eAiCE;AACE,IAAA,QAAQ,EAAEL,cAAc,IAAIC,IAAI,CAACG,MAAL,KAAgB,SAD9C;AAEE,IAAA,OAAO,EAAE,MAAMD,MAAM,CAACY,aAAP,CAAqBd,IAAI,CAACI,OAA1B,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjCF,CADF;AAyCD;AAED;;;;AAGA,SAASM,aAAT,CAAuBC,MAAvB,EAAiDX,IAAjD,EAAkEE,MAAlE,EAAkFD,QAAlF,EAA8G;AAC5GC,EAAAA,MAAM,CAACa,SAAP,CAAiBf,IAAI,CAACI,OAAtB,EAA+BY,QAAQ,CAACL,MAAM,CAACJ,KAAR,CAAvC;AACAN,EAAAA,QAAQ,CAAC;AACPgB,IAAAA,IAAI,EAAE,gBADC;AAEPV,IAAAA,KAAK,EAAE,EACL,GAAGP,IADE;AAELO,MAAAA,KAAK,EAAES,QAAQ,CAACL,MAAM,CAACJ,KAAR;AAFV;AAFA,GAAD,CAAR;AAOD;;AAED,SAASC,YAAT,CAAsBJ,OAAtB,EAAuCF,MAAvC,EAAuD;AACrD,MAAIgB,YAAY,GAAGC,MAAM,CAACC,OAAP,CAAgB,qBAAoBhB,OAAQ,qFAA5C,CAAnB;;AACA,MAAIc,YAAJ,EAAkB;AAChBhB,IAAAA,MAAM,CAACM,YAAP,CAAoBJ,OAApB;AACD;AACF","sourcesContent":["import React, {Dispatch} from 'react';\nimport Action, {Channel} from '../../action';\nimport './Fader.css';\nimport Server from '../../server';\n\n/**\n * The globally-saved state of a fader (anything which should be saved on the\n * server or visible to other components).  Local-only state may be saved or\n * accessed via the `useState` hook instead.\n */\nexport type FaderData = Channel;\n\n/**\n * Properties passed down from the parent into the fader.  These must be\n * updated via `dispatch`.\n */\ntype FaderProps = {\n  state_modified: boolean;\n  data: FaderData;\n  dispatch: Dispatch<Action>;\n  server: Server;\n}\n\n/**\n * Represents a basic one-channel input (e.g. a single channel's volume or a\n * single dimmer's intensity).\n */\nexport default function Fader({state_modified, data, dispatch, server}: FaderProps) {\n  return (\n    <div className=\"Fader\">\n      <p className={\"_text _\" + data.status}>\n        {data.channel}: {Math.round(data.value/255 * 100)}\n        <br/>\n        <button\n          onClick={() => hide_channel(data.channel, server)}>\n          Hide\n        </button>\n\t\t<checkbox>\n\t\t  Mute\n\t\t</checkbox>\n\t\t<checkbox>\n\t\t  Solo\n\t\t</checkbox>\n      </p>\n      <br/>\n      <input\n        className=\"_fader\"\n        type=\"range\"\n        min=\"0\"\n        max=\"255\"\n        value={data.value}\n        onChange={(event) => fader_changed(event.target, data, server, dispatch)}/>\n      <button\n        disabled={data.status !== \"manual\"}\n        onClick={() => server.reset_channel(data.channel)}>\n        Reset\n      </button>\n      <button\n        disabled={state_modified || data.status === \"tracked\"}\n        onClick={() => server.track_channel(data.channel)}>\n        Track\n      </button>\n      <button\n        disabled={state_modified || data.status !== \"tracked\"}\n        onClick={() => server.block_channel(data.channel)}>\n        Block\n      </button>\n    </div>\n  );\n}\n\n/**\n * A fader was moved; dispatch the appropriate events to update the state.\n */\nfunction fader_changed(target: HTMLInputElement, data: FaderData, server: Server, dispatch: Dispatch<Action>) {\n  server.set_level(data.channel, parseInt(target.value));\n  dispatch({\n    type: 'update_channel',\n    value: {\n      ...data,\n      value: parseInt(target.value),\n    }\n  });\n}\n\nfunction hide_channel(channel: number, server: Server) {\n  let confirmation = window.confirm(`Disabling channel ${channel} will hide it and turn off its output (over DMX or into the mixer). Please confirm.`);\n  if (confirmation) {\n    server.hide_channel(channel);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}