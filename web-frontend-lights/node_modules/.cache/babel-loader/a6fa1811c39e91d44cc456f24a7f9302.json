{"ast":null,"code":"/**\n * Update the application's client-side global state.  Call via `dispatch`.\n */\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case 'connection_change':\n      return { ...state,\n        connected: action.status\n      };\n\n    case 'update_cue':\n      return { ...state,\n        cue: action.cue\n      };\n\n    case 'update_cue_list':\n      return { ...state,\n        cues: action.cues\n      };\n\n    case 'update_channel':\n      return update_channel(state, action.value);\n\n    case 'update_channels':\n      return update_channels(state, action.values);\n\n    case 'update_lists':\n      return update_lists(state, action.lists);\n\n    case 'switch_list':\n      return switch_list(state, action.id);\n  }\n}\n/**\n * Updates the application's client-side global state when a channel is changed.\n */\n\nfunction update_channel(state, value) {\n  if (value.value < 0 || value.value > 255) return state;\n  let faders = state.faders.map(fader => {\n    if (fader.channel === value.channel) {\n      return {\n        channel: fader.channel,\n        value: value.value,\n        status: value.status\n      };\n    } else {\n      return fader;\n    }\n  });\n  return { ...state,\n    faders\n  };\n}\n\nfunction update_channels(state, values) {\n  let new_faders = values;\n  let channels = new_faders.map(x => x.channel);\n\n  for (let channel of state.faders) {\n    if (channels.indexOf(channel.channel) === -1) {\n      channel.value = 0;\n      channel.status = \"manual\";\n      new_faders.push(channel);\n      channels.push(channel.channel);\n    }\n  }\n\n  return { ...state,\n    faders: new_faders\n  };\n}\n\nfunction update_lists(state, new_lists) {\n  let lists = {\n    id: state.lists.id,\n    name: \"loading\",\n    lists: new_lists\n  };\n\n  for (let l of lists.lists) {\n    if (l.id === state.lists.id) {\n      lists.name = l.name;\n    }\n  }\n\n  return { ...state,\n    lists\n  };\n}\n\nfunction switch_list(state, id) {\n  let lists = {\n    id,\n    name: \"loading\",\n    lists: state.lists.lists\n  };\n\n  for (let l of lists.lists) {\n    if (l.id === state.lists.id) {\n      lists.name = l.name;\n    }\n  }\n\n  return { ...state,\n    lists\n  };\n}","map":{"version":3,"sources":["/home/artagan/Desktop/equipment/web-frontend/src/reducer.ts"],"names":["reducer","state","action","type","connected","status","cue","cues","update_channel","value","update_channels","values","update_lists","lists","switch_list","id","faders","map","fader","channel","new_faders","channels","x","indexOf","push","new_lists","name","l"],"mappings":"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","sourcesContent":["import Action, {Channel, CueList} from './action';\nimport {AppState} from './components/App/App';\n\n/**\n * Update the application's client-side global state.  Call via `dispatch`.\n */\nexport default function reducer(state: AppState, action: Action): AppState {\n  switch (action.type) {\n    case 'connection_change':\n      return {...state, connected: action.status};\n    case 'update_cue':\n      return {...state, cue: action.cue};\n    case 'update_cue_list':\n      return {...state, cues: action.cues};\n    case 'update_channel':\n      return update_channel(state, action.value);\n    case 'update_channels':\n      return update_channels(state, action.values);\n    case 'update_lists':\n      return update_lists(state, action.lists);\n    case 'switch_list':\n      return switch_list(state, action.id);\n  }\n}\n\n/**\n * Updates the application's client-side global state when a channel is changed.\n */\nfunction update_channel(state: AppState, value: Channel): AppState {\n  if (value.value < 0 || value.value > 255) return state;\n  let faders = state.faders.map((fader) => {\n    if (fader.channel === value.channel) {\n      return {\n        channel: fader.channel,\n        value: value.value,\n        status: value.status,\n      }\n    } else {\n      return fader;\n    }\n  });\n  return {\n    ...state,\n    faders,\n  };\n}\n\nfunction update_channels(state: AppState, values: Channel[]): AppState {\n  let new_faders = values;\n  let channels = new_faders.map(x => x.channel);\n  for (let channel of state.faders) {\n    if (channels.indexOf(channel.channel) === -1) {\n      channel.value = 0;\n      channel.status = \"manual\";\n      new_faders.push(channel);\n      channels.push(channel.channel);\n    }\n  }\n  return {...state, faders: new_faders};\n}\n\nfunction update_lists(state: AppState, new_lists: CueList[]): AppState {\n  let lists = {\n    id: state.lists.id,\n    name: \"loading\",\n    lists: new_lists,\n  }\n  for (let l of lists.lists) {\n    if (l.id === state.lists.id) {\n      lists.name = l.name;\n    }\n  }\n  return {...state, lists};\n}\n\nfunction switch_list(state: AppState, id: number): AppState {\n  let lists = {\n    id,\n    name: \"loading\",\n    lists: state.lists.lists,\n  }\n  for (let l of lists.lists) {\n    if (l.id === state.lists.id) {\n      lists.name = l.name;\n    }\n  }\n  return {...state, lists};\n}\n"]},"metadata":{},"sourceType":"module"}