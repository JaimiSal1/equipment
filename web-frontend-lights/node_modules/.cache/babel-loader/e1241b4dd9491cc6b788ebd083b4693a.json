{"ast":null,"code":"var _jsxFileName = \"/home/artagan/Desktop/equipment/web-frontend/src/components/App/App.tsx\";\nimport React, { useReducer, useEffect, useRef } from 'react';\nimport './App.css';\nimport reducer from '../../reducer';\nimport Fader from '../Fader/Fader';\nimport Server from '../../server';\nimport CueStatus from '../CueStatus/CueStatus';\nimport Controller from '../../controller';\nimport ListControls from '../ListControls/ListControls';\n/**\n * The application's overall state.  Every piece of server-side state the application needs\n * is also saved in here somewhere, plus any top-level local state.  This\n * should probably be a union of \"Loading\", \"Active\", and \"Error\" states.\n */\n\n/**\n * The initial state of the application.  This should probably put the\n * application in \"Loading\" state and wait for the server to provide the\n * initial data.\n */\nexport const initialState = {\n  connected: false,\n  cue: {\n    current: 0,\n    fade_time: 1,\n    fade_progress: 1,\n    fading: false,\n    last: 0,\n    next: 0,\n    previous: 0\n  },\n  cues: [],\n  faders: [{\n    channel: 0,\n    value: 0,\n    status: 'manual'\n  }, {\n    channel: 1,\n    value: 0,\n    status: 'manual'\n  }, {\n    channel: 2,\n    value: 0,\n    status: 'manual'\n  }, {\n    channel: 3,\n    value: 0,\n    status: 'manual'\n  }, {\n    channel: 4,\n    value: 0,\n    status: 'manual'\n  }, {\n    channel: 5,\n    value: 0,\n    status: 'manual'\n  }, {\n    channel: 6,\n    value: 0,\n    status: 'manual'\n  }, {\n    channel: 7,\n    value: 0,\n    status: 'manual'\n  }],\n  lists: {\n    id: 0,\n    name: \"N/A\",\n    lists: []\n  }\n};\nexport default function App(_props) {\n  var _controller$current;\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const server = useRef(null);\n  const controller = useRef(null);\n  useEffect(() => {\n    server.current = new Server(dispatch, state.lists.id);\n    return () => {\n      var _server$current;\n\n      (_server$current = server.current) === null || _server$current === void 0 ? void 0 : _server$current.disconnect();\n    };\n  }, [state.lists.id]);\n  useEffect(() => {\n    if (server.current) {\n      controller.current = new Controller(initialState, dispatch, server.current);\n    }\n  }, [server]);\n\n  if (server.current === null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  } else if (!state.connected) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 12\n      }\n    }, \"Connecting...\");\n  }\n\n  (_controller$current = controller.current) === null || _controller$current === void 0 ? void 0 : _controller$current.update_state(state);\n  const state_modified = state.faders.reduce((prev, current) => prev || current.status === \"manual\", false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListControls, {\n    data: state.lists,\n    server: server.current,\n    dispatch: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"FaderBank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, state.faders.sort((a, b) => a.channel > b.channel ? 1 : -1).map((faderState, i) => {\n    return /*#__PURE__*/React.createElement(Fader, {\n      key: i,\n      state_modified: state_modified,\n      data: faderState,\n      dispatch: dispatch,\n      server: server.current,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 20\n      }\n    });\n  })), /*#__PURE__*/React.createElement(CueStatus, {\n    data: state.cue,\n    cues: state.cues,\n    dispatch: dispatch,\n    server: server.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      var _server$current2;\n\n      return (_server$current2 = server.current) === null || _server$current2 === void 0 ? void 0 : _server$current2.save_to_disk();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"Save to Disk\"));\n}","map":{"version":3,"sources":["/home/artagan/Desktop/equipment/web-frontend/src/components/App/App.tsx"],"names":["React","useReducer","useEffect","useRef","reducer","Fader","Server","CueStatus","Controller","ListControls","initialState","connected","cue","current","fade_time","fade_progress","fading","last","next","previous","cues","faders","channel","value","status","lists","id","name","App","_props","state","dispatch","server","controller","disconnect","update_state","state_modified","reduce","prev","sort","a","b","map","faderState","i","save_to_disk"],"mappings":"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","sourcesContent":["import React, {useReducer, useEffect, useRef, MutableRefObject} from 'react';\nimport './App.css';\nimport reducer from '../../reducer';\nimport Fader, {FaderData} from '../Fader/Fader';\nimport Server from '../../server';\nimport CueStatus, {CueStatusData} from '../CueStatus/CueStatus';\nimport Controller from '../../controller';\nimport ListControls, {ListData} from '../ListControls/ListControls';\n\n\n/**\n * The application's overall state.  Every piece of server-side state the application needs\n * is also saved in here somewhere, plus any top-level local state.  This\n * should probably be a union of \"Loading\", \"Active\", and \"Error\" states.\n */\nexport type AppState = {\n  connected: boolean,\n  cue: CueStatusData,\n  cues: number[],\n  faders: FaderData[],\n  lists: ListData,\n}\n\n/**\n * The initial state of the application.  This should probably put the\n * application in \"Loading\" state and wait for the server to provide the\n * initial data.\n */\nexport const initialState: AppState = {\n  connected: false,\n  cue: {\n    current: 0,\n    fade_time: 1,\n    fade_progress: 1,\n    fading: false,\n    last: 0,\n    next: 0,\n    previous: 0,\n  },\n  cues: [],\n  faders: [\n    {channel: 0, value: 0, status: 'manual'},\n    {channel: 1, value: 0, status: 'manual'},\n    {channel: 2, value: 0, status: 'manual'},\n    {channel: 3, value: 0, status: 'manual'},\n    {channel: 4, value: 0, status: 'manual'},\n    {channel: 5, value: 0, status: 'manual'},\n    {channel: 6, value: 0, status: 'manual'},\n    {channel: 7, value: 0, status: 'manual'},\n  ],\n  lists: {\n    id: 0,\n    name: \"N/A\",\n    lists: [],\n  }\n}\n\nexport default function App(_props: {}) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const server: MutableRefObject<Server | null> = useRef(null);\n  const controller: MutableRefObject<Controller | null> = useRef(null);\n  useEffect(() => {\n    server.current = new Server(dispatch, state.lists.id);\n    return () => {\n      server.current?.disconnect();\n    }\n  }, [state.lists.id]);\n\n  useEffect(() => {\n    if (server.current) {\n      controller.current = new Controller(initialState, dispatch, server.current as Server);\n    }\n  }, [server]);\n\n  if (server.current === null) {\n    return <div>Loading...</div>\n  } else if (!state.connected) {\n    return <div>Connecting...</div>\n  }\n  controller.current?.update_state(state);\n\n\n  const state_modified = state.faders.reduce((prev, current) => prev || current.status === \"manual\", false);\n\n  return (\n    <div className=\"App\">\n      <ListControls data={state.lists} server={server.current as Server} dispatch={dispatch}/>\n      <div className=\"FaderBank\">\n        {\n          state.faders.sort((a, b) => (a.channel > b.channel) ? 1 : -1).map((faderState: FaderData, i: number) => {\n            return <Fader key={i} state_modified={state_modified} data={faderState} dispatch={dispatch} server={server.current as Server}/>\n            })\n        }\n      </div>\n      <CueStatus data={state.cue} cues={state.cues} dispatch={dispatch} server={server.current as Server}/>\n      <button onClick={() => server.current?.save_to_disk()}>Save to Disk</button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}