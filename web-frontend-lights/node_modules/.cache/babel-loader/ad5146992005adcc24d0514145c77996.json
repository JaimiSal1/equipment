{"ast":null,"code":"import _objectSpread from\"/home/artagan/Desktop/equipment/web-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import'./Fader.css';/**\n * Represents a basic one-channel input (e.g. a single channel's volume or a\n * single dimmer's intensity).\n */export default function Fader(_ref){var state_modified=_ref.state_modified,data=_ref.data,dispatch=_ref.dispatch,server=_ref.server;return/*#__PURE__*/React.createElement(\"div\",{className:\"Fader\"},/*#__PURE__*/React.createElement(\"p\",{className:\"_text _\"+data.status},data.channel,\": \",Math.round(data.value/255*100)),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"input\",{className:\"_fader\",type:\"range\",min:\"0\",max:\"255\",value:data.value,onChange:function onChange(event){return fader_changed(event.target,data,server,dispatch);}}),/*#__PURE__*/React.createElement(\"button\",{disabled:data.status!==\"manual\",onClick:function onClick(){return server.reset_channel(data.channel);}},\"Reset\"),/*#__PURE__*/React.createElement(\"button\",{disabled:state_modified||data.status===\"tracked\",onClick:function onClick(){return server.track_channel(data.channel);}},\"Track\"),/*#__PURE__*/React.createElement(\"button\",{disabled:state_modified||data.status!==\"tracked\",onClick:function onClick(){return server.block_channel(data.channel);}},\"Block\"));}/**\n * A fader was moved; dispatch the appropriate events to update the state.\n */function fader_changed(target,data,server,dispatch){server.set_level(data.channel,parseInt(target.value));dispatch({type:'update_channel',value:_objectSpread({},data,{value:parseInt(target.value)})});}","map":{"version":3,"sources":["/home/artagan/Desktop/equipment/web-frontend/src/components/Fader/Fader.tsx"],"names":["React","Fader","state_modified","data","dispatch","server","status","channel","Math","round","value","event","fader_changed","target","reset_channel","track_channel","block_channel","set_level","parseInt","type"],"mappings":"8HAAA,MAAOA,CAAAA,KAAP,KAA8B,OAA9B,CAEA,MAAO,aAAP,CAqBA;;;GAIA,cAAe,SAASC,CAAAA,KAAT,MAAqE,IAArDC,CAAAA,cAAqD,MAArDA,cAAqD,CAArCC,IAAqC,MAArCA,IAAqC,CAA/BC,QAA+B,MAA/BA,QAA+B,CAArBC,MAAqB,MAArBA,MAAqB,CAClF,mBACE,2BAAK,SAAS,CAAC,OAAf,eACE,yBAAG,SAAS,CAAE,UAAYF,IAAI,CAACG,MAA/B,EACGH,IAAI,CAACI,OADR,MACmBC,IAAI,CAACC,KAAL,CAAWN,IAAI,CAACO,KAAL,CAAW,GAAX,CAAiB,GAA5B,CADnB,CADF,cAIE,8BAJF,cAKE,6BACE,SAAS,CAAC,QADZ,CAEE,IAAI,CAAC,OAFP,CAGE,GAAG,CAAC,GAHN,CAIE,GAAG,CAAC,KAJN,CAKE,KAAK,CAAEP,IAAI,CAACO,KALd,CAME,QAAQ,CAAE,kBAACC,KAAD,QAAWC,CAAAA,aAAa,CAACD,KAAK,CAACE,MAAP,CAAeV,IAAf,CAAqBE,MAArB,CAA6BD,QAA7B,CAAxB,EANZ,EALF,cAYE,8BACE,QAAQ,CAAED,IAAI,CAACG,MAAL,GAAgB,QAD5B,CAEE,OAAO,CAAE,yBAAMD,CAAAA,MAAM,CAACS,aAAP,CAAqBX,IAAI,CAACI,OAA1B,CAAN,EAFX,UAZF,cAiBE,8BACE,QAAQ,CAAEL,cAAc,EAAIC,IAAI,CAACG,MAAL,GAAgB,SAD9C,CAEE,OAAO,CAAE,yBAAMD,CAAAA,MAAM,CAACU,aAAP,CAAqBZ,IAAI,CAACI,OAA1B,CAAN,EAFX,UAjBF,cAsBE,8BACE,QAAQ,CAAEL,cAAc,EAAIC,IAAI,CAACG,MAAL,GAAgB,SAD9C,CAEE,OAAO,CAAE,yBAAMD,CAAAA,MAAM,CAACW,aAAP,CAAqBb,IAAI,CAACI,OAA1B,CAAN,EAFX,UAtBF,CADF,CA8BD,CAED;;GAGA,QAASK,CAAAA,aAAT,CAAuBC,MAAvB,CAAiDV,IAAjD,CAAkEE,MAAlE,CAAkFD,QAAlF,CAA8G,CAC5GC,MAAM,CAACY,SAAP,CAAiBd,IAAI,CAACI,OAAtB,CAA+BW,QAAQ,CAACL,MAAM,CAACH,KAAR,CAAvC,EACAN,QAAQ,CAAC,CACPe,IAAI,CAAE,gBADC,CAEPT,KAAK,kBACAP,IADA,EAEHO,KAAK,CAAEQ,QAAQ,CAACL,MAAM,CAACH,KAAR,CAFZ,EAFE,CAAD,CAAR,CAOD","sourcesContent":["import React, {Dispatch} from 'react';\nimport Action, {Channel} from '../../action';\nimport './Fader.css';\nimport Server from '../../server';\n\n/**\n * The globally-saved state of a fader (anything which should be saved on the\n * server or visible to other components).  Local-only state may be saved or\n * accessed via the `useState` hook instead.\n */\nexport type FaderData = Channel;\n\n/**\n * Properties passed down from the parent into the fader.  These must be\n * updated via `dispatch`.\n */\ntype FaderProps = {\n  state_modified: boolean;\n  data: FaderData;\n  dispatch: Dispatch<Action>;\n  server: Server;\n}\n\n/**\n * Represents a basic one-channel input (e.g. a single channel's volume or a\n * single dimmer's intensity).\n */\nexport default function Fader({state_modified, data, dispatch, server}: FaderProps) {\n  return (\n    <div className=\"Fader\">\n      <p className={\"_text _\" + data.status}>\n        {data.channel}: {Math.round(data.value/255 * 100)}\n      </p>\n      <br/>\n      <input\n        className=\"_fader\"\n        type=\"range\"\n        min=\"0\"\n        max=\"255\"\n        value={data.value}\n        onChange={(event) => fader_changed(event.target, data, server, dispatch)}/>\n      <button\n        disabled={data.status !== \"manual\"}\n        onClick={() => server.reset_channel(data.channel)}>\n        Reset\n      </button>\n      <button\n        disabled={state_modified || data.status === \"tracked\"}\n        onClick={() => server.track_channel(data.channel)}>\n        Track\n      </button>\n      <button\n        disabled={state_modified || data.status !== \"tracked\"}\n        onClick={() => server.block_channel(data.channel)}>\n        Block\n      </button>\n    </div>\n  );\n}\n\n/**\n * A fader was moved; dispatch the appropriate events to update the state.\n */\nfunction fader_changed(target: HTMLInputElement, data: FaderData, server: Server, dispatch: Dispatch<Action>) {\n  server.set_level(data.channel, parseInt(target.value));\n  dispatch({\n    type: 'update_channel',\n    value: {\n      ...data,\n      value: parseInt(target.value),\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}