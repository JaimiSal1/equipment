{"version":3,"sources":["reducer.ts","components/Fader/Fader.tsx","server.ts","components/CueStatus/CueStatus.tsx","controller.ts","components/ListControls/ListControls.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["reducer","state","action","type","connected","status","cue","cues","value","faders","map","fader","channel","update_channel","values","new_faders","channels","x","indexOf","push","update_channels","new_lists","lists","id","name","l","update_lists","switch_list","Fader","state_modified","data","dispatch","server","className","Math","round","min","max","onChange","event","target","set_level","parseInt","fader_changed","disabled","onClick","reset_channel","track_channel","block_channel","Server","list_id","socket","disconnect_timeout","this","connect","readyState","WebSocket","OPEN","onmessage","evt","onopen","onclose","undefined","window","setTimeout","onerror","close","console","log","clearTimeout","send","JSON","stringify","msg","parse","get_levels","list_cues","get_lists","error","list","current","fade_time","parseFloat","fade_progress","fading","last","next","previous","number","floor","time","CueStatus","useState","cue_number","set_cue_number","saved_cue_number","set_saved_cue_number","cue_time","set_cue_time","useEffect","back","go","save_cue","q","confirm","delete_cue","length","e","restore_cue","key","Controller","input","timeouts","pending_recording","last_state","Map","navigator","requestMIDIAccess","sysex","then","a","onaccess","onfailure","access","inputs","size","entries","manufacturer","onmidimessage","m","message","has","get","set","ontimeout","delete","ListControls","list_ids","free_id","change_list","old_name","prompt","rename_list","delete_list","remove_list","initialState","App","_props","useReducer","useRef","controller","disconnect","update_state","reduce","prev","sort","b","faderState","i","save_to_disk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d955d725.chunk.js","sourcesContent":["import Action, {Channel, CueList} from './action';\nimport {AppState} from './components/App/App';\n\n/**\n * Update the application's client-side global state.  Call via `dispatch`.\n */\nexport default function reducer(state: AppState, action: Action): AppState {\n  switch (action.type) {\n    case 'connection_change':\n      return {...state, connected: action.status};\n    case 'update_cue':\n      return {...state, cue: action.cue};\n    case 'update_cue_list':\n      return {...state, cues: action.cues};\n    case 'update_channel':\n      return update_channel(state, action.value);\n    case 'update_channels':\n      return update_channels(state, action.values);\n    case 'update_lists':\n      return update_lists(state, action.lists);\n    case 'switch_list':\n      return switch_list(state, action.id);\n  }\n}\n\n/**\n * Updates the application's client-side global state when a channel is changed.\n */\nfunction update_channel(state: AppState, value: Channel): AppState {\n  if (value.value < 0 || value.value > 255) return state;\n  let faders = state.faders.map((fader) => {\n    if (fader.channel === value.channel) {\n      return {\n        channel: fader.channel,\n        value: value.value,\n        status: value.status,\n      }\n    } else {\n      return fader;\n    }\n  });\n  return {\n    ...state,\n    faders,\n  };\n}\n\nfunction update_channels(state: AppState, values: Channel[]): AppState {\n  let new_faders = values;\n  let channels = new_faders.map(x => x.channel);\n  for (let channel of state.faders) {\n    if (channels.indexOf(channel.channel) === -1) {\n      channel.value = 0;\n      channel.status = \"manual\";\n      new_faders.push(channel);\n      channels.push(channel.channel);\n    }\n  }\n  return {...state, faders: new_faders};\n}\n\nfunction update_lists(state: AppState, new_lists: CueList[]): AppState {\n  let lists = {\n    id: state.lists.id,\n    name: \"loading\",\n    lists: new_lists,\n  }\n  for (let l of lists.lists) {\n    if (l.id === state.lists.id) {\n      lists.name = l.name;\n    }\n  }\n  return {...state, lists};\n}\n\nfunction switch_list(state: AppState, id: number): AppState {\n  let lists = {\n    id,\n    name: \"loading\",\n    lists: state.lists.lists,\n  }\n  for (let l of lists.lists) {\n    if (l.id === state.lists.id) {\n      lists.name = l.name;\n    }\n  }\n  return {...state, lists};\n}\n","import React, {Dispatch} from 'react';\nimport Action, {Channel} from '../../action';\nimport './Fader.css';\nimport Server from '../../server';\n\n/**\n * The globally-saved state of a fader (anything which should be saved on the\n * server or visible to other components).  Local-only state may be saved or\n * accessed via the `useState` hook instead.\n */\nexport type FaderData = Channel;\n\n/**\n * Properties passed down from the parent into the fader.  These must be\n * updated via `dispatch`.\n */\ntype FaderProps = {\n  state_modified: boolean;\n  data: FaderData;\n  dispatch: Dispatch<Action>;\n  server: Server;\n}\n\n/**\n * Represents a basic one-channel input (e.g. a single channel's volume or a\n * single dimmer's intensity).\n */\nexport default function Fader({state_modified, data, dispatch, server}: FaderProps) {\n  return (\n    <div className=\"Fader\">\n      <p className={\"_text _\" + data.status}>\n        {data.channel}: {Math.round(data.value/255 * 100)}\n      </p>\n      <br/>\n      <input\n        className=\"_fader\"\n        type=\"range\"\n        min=\"0\"\n        max=\"255\"\n        value={data.value}\n        onChange={(event) => fader_changed(event.target, data, server, dispatch)}/>\n      <button\n        disabled={data.status !== \"manual\"}\n        onClick={() => server.reset_channel(data.channel)}>\n        Reset\n      </button>\n      <button\n        disabled={state_modified || data.status === \"tracked\"}\n        onClick={() => server.track_channel(data.channel)}>\n        Track\n      </button>\n      <button\n        disabled={state_modified || data.status !== \"tracked\"}\n        onClick={() => server.block_channel(data.channel)}>\n        Block\n      </button>\n    </div>\n  );\n}\n\n/**\n * A fader was moved; dispatch the appropriate events to update the state.\n */\nfunction fader_changed(target: HTMLInputElement, data: FaderData, server: Server, dispatch: Dispatch<Action>) {\n  server.set_level(data.channel, parseInt(target.value));\n  dispatch({\n    type: 'update_channel',\n    value: {\n      ...data,\n      value: parseInt(target.value),\n    }\n  });\n}\n","import {Dispatch} from 'react';\nimport Action from './action';\n\nconst SERVER_URL: string = 'ws://localhost:8000';\n\ntype GetLevels = {\n  type: 'get-levels',\n  list: string,\n  cue: {\n    'current': string,\n    'fade_time': string,\n    'fade_progress': string,\n    'fading': string,\n    'last': string,\n    'next': string,\n    'previous': string,\n  },\n  values: [\n    {\n      'channel': string,\n      'value': string,\n      status: 'manual' | 'lowered' | 'raised' | 'tracked' | 'blocked';\n    }\n  ]\n};\n\ntype GetLists = {\n  type: 'get-lists',\n  lists: [\n    {\n      'number': string,\n      'name': string,\n    }\n  ]\n};\n\ntype ListCues = {\n  type: 'list-cues',\n  list: string,\n  cue: string,\n  cues: [\n    {\n      'number': string,\n    }\n  ]\n};\n\ntype Message = GetLevels | GetLists | ListCues;\n\nexport default class Server {\n  socket: WebSocket;\n  dispatch: Dispatch<Action>;\n  disconnect_timeout?: number;\n  list_id: number;\n\n  constructor(dispatch: Dispatch<Action>, list_id: number) {\n    this.dispatch = dispatch;\n    this.socket = this.connect();\n    this.list_id = list_id;\n  }\n\n  private connect() {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      return this.socket;\n    }\n    let socket = new WebSocket(SERVER_URL);\n    socket.onmessage = (evt) => this.onmessage(evt.data);\n    socket.onopen = () => this.onopen();\n    socket.onclose = () => {\n      if (this.disconnect_timeout === undefined) {\n        this.disconnect_timeout = window.setTimeout(() => {\n          this.dispatch({type: 'connection_change', status: false});\n        }, 1000);\n      }\n      setTimeout(() => {\n        this.socket = this.connect();\n      }, 100);\n    }\n    socket.onerror = () => {\n      socket.close();\n    }\n    this.socket = socket;\n    return socket;\n  }\n\n  public disconnect() {\n    console.log(\"disconnect\");\n    this.onmessage = () => {};\n    if (this.socket) {\n      this.socket.onclose = () => {};\n      this.socket.close();\n    }\n  }\n\n  private onopen() {\n    window.clearTimeout(this.disconnect_timeout);\n    this.disconnect_timeout = undefined;\n    this.dispatch({type: 'connection_change', status: true});\n    {\n      let data = {type: 'get-levels', list_id: this.list_id};\n      this.socket.send(JSON.stringify(data));\n      data = {type: 'list-cues', list_id: this.list_id};\n      this.socket.send(JSON.stringify(data));\n    }\n    {\n      let data = {type: 'get-lists'};\n      this.socket.send(JSON.stringify(data));\n    }\n  }\n\n  private onmessage(data: string) {\n    try {\n      let msg: Message = JSON.parse(data);\n      switch (msg.type) {\n        case 'get-levels':\n          this.get_levels(msg);\n          break;\n        case 'list-cues':\n          this.list_cues(msg);\n          break;\n        case 'get-lists':\n          this.get_lists(msg);\n          break;\n        default:\n          console.log(\"Unrecognized message type!\");\n      }\n    } catch {\n      console.error(\"Error while deserializing!\");\n    }\n  }\n\n  private get_levels(msg: GetLevels) {\n    if (parseInt(msg.list) !== this.list_id) return;\n    let values = msg.values || [];\n    this.dispatch({\n      type: 'update_channels',\n      values: values.map((x) => {\n        return {\n          channel: parseInt(x.channel),\n          value: parseInt(x.value),\n          status: x.status,\n        }\n      }),\n    });\n    this.dispatch({\n      type: 'update_cue',\n      cue: {\n        current: parseInt(msg.cue.current),\n        fade_time: parseFloat(msg.cue.fade_time),\n        fade_progress: parseFloat(msg.cue.fade_progress),\n        fading: msg.cue.fading === \"true\",\n        last: parseInt(msg.cue.last),\n        next: parseInt(msg.cue.next),\n        previous: parseInt(msg.cue.previous),\n      }\n    });\n  }\n\n  private get_lists(msg: GetLists) {\n    let lists = msg.lists || [];\n    this.dispatch({\n      type: 'update_lists',\n      lists: lists.map((x) => {\n        return {\n          name: x.name,\n          id: parseInt(x.number)\n        }\n      }),\n    });\n  }\n\n  private list_cues(msg: ListCues) {\n    if (parseInt(msg.list) !== this.list_id) return;\n    let cues = msg.cues || [];\n    this.dispatch({\n      type: 'update_cue_list',\n      cues: cues.map((x) => {\n        return parseInt(x.number);\n      }),\n    });\n  }\n\n  rename_list(list_id: number, name: string) {\n    list_id = Math.floor(list_id);\n    let data = {\n      type: 'rename-list',\n      list_id: this.list_id,\n      name,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  delete_list(list_id: number) {\n    list_id = Math.floor(list_id);\n    let data = {\n      type: 'delete-list',\n      list_id: this.list_id,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  reset_channel(channel: number) {\n    channel = Math.floor(channel);\n    let data = {\n      type: 'reset-channel',\n      list_id: this.list_id,\n      channel,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  block_channel(channel: number) {\n    channel = Math.floor(channel);\n    let data = {\n      type: 'block-channel',\n      list_id: this.list_id,\n      channel,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  track_channel(channel: number) {\n    channel = Math.floor(channel);\n    let data = {\n      type: 'track-channel',\n      list_id: this.list_id,\n      channel,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  set_level(channel: number, value: number) {\n    channel = Math.floor(channel);\n    value = Math.floor(value);\n    let data = {\n      type: 'set-levels',\n      list_id: this.list_id,\n      values: [\n        {\n          channel,\n          value,\n        }\n      ]\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  save_cue(cue: number, time: number) {\n    cue = Math.floor(cue);\n    let data = {\n      type: 'save-cue',\n      list_id: this.list_id,\n      cue,\n      time,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  delete_cue(cue: number) {\n    cue = Math.floor(cue);\n    let data = {\n      type: 'delete-cue',\n      list_id: this.list_id,\n      cue,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  restore_cue(cue: number) {\n    cue = Math.floor(cue);\n    let data = {\n      type: 'restore-cue',\n      list_id: this.list_id,\n      cue,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  go() {\n    let data = {\n      type: 'go-cue',\n      list_id: this.list_id,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  back() {\n    let data = {\n      type: 'back-cue',\n      list_id: this.list_id,\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n\n  save_to_disk() {\n    let data = {\n      type: 'save-to-disk',\n    };\n    this.socket.send(JSON.stringify(data));\n  }\n}\n","import React, {Dispatch, useState, useEffect} from 'react';\nimport Action, {CueStatusData as ActionCueStatusData} from '../../action';\nimport './CueStatus.css';\nimport Server from '../../server';\n\nexport type CueStatusData = ActionCueStatusData;\n\n/**\n * Properties passed down from the parent into the fader.  These must be\n * updated via `dispatch`.\n */\ntype CueStatusProps = {\n  data: CueStatusData;\n  cues: number[],\n  dispatch: Dispatch<Action>;\n  server: Server;\n}\n\n/**\n * Represents a basic one-channel input (e.g. a single channel's volume or a\n * single dimmer's intensity).\n */\nexport default function CueStatus({data, dispatch, cues, server}: CueStatusProps) {\n  let [cue_number, set_cue_number] = useState(data.current);\n  let [saved_cue_number, set_saved_cue_number] = useState(data.current);\n  let [cue_time, set_cue_time] = useState(data.fade_time);\n\n  useEffect(() => {\n    if (data.current !== saved_cue_number) {\n      set_saved_cue_number(data.current);\n      set_cue_number(data.current);\n      set_cue_time(data.fade_time);\n    }\n  }, [data, saved_cue_number]);\n\n  return (\n    <div className=\"CueStatus\">\n      <div className=\"_view\">\n        <span className=\"_previousQ\">{data.previous}&larr;</span>\n        <span className=\"_currentQ\">{data.current}</span>\n        <span className=\"_nextQ\">&rarr;{data.next}</span>\n      </div>\n      <progress className=\"_fadeProgress\" max=\"255\" value={data.fade_progress * 255}/>\n      <div className=\"_controls\">\n        <button className=\"_back\"\n          onClick={() => server.back()}\n          disabled={data.previous === data.current}>\n          Back\n        </button>\n        <button className=\"_go\"\n          onClick={() => server.go()}\n          disabled={!data.fading && data.next === data.current}>\n          Go!\n        </button>\n        <div className=\"_recording\">\n          <label>\n            Cue:\n            <input type=\"number\" value={cue_number} onChange={(evt) => set_cue_number(parseInt(evt.target.value) || 0)}/>\n          </label>\n          <label>\n            Time:\n            <input type=\"number\" value={cue_time} onChange={(evt) => set_cue_time(parseFloat(evt.target.value) || 0)}/>\n          </label>\n          <button className=\"_record\" onClick={() => server.save_cue(cue_number, cue_time)}>\n            Record\n          </button>\n          <div>\n            <button className=\"_delete\" onClick={() => delete_cue(cue_number, server)}>\n              Delete\n            </button>\n            <select className=\"_go_to_q\" value={cue_number} disabled={cues.length === 0} onChange={(e) => server.restore_cue(parseInt(e.target.value))}>\n              {\n                cues.length === 0 ?\n                <option>No cues.</option>\n                : cues.map(x => {\n                  return <option key={x} value={x}>Go to {x}</option>\n                })\n              }\n            </select>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction delete_cue(q: number, server: Server) {\n  let confirmation = window.confirm(`Are you sure you want to delete cue #${q}?`);\n  if (confirmation === true) {\n    server.delete_cue(q);\n  }\n}\n","import {Dispatch} from 'react';\nimport Action from './action';\nimport Server from './server';\nimport {AppState} from './components/App/App';\n// import WebMidi from 'webmidi';\n\nexport default class Controller {\n  server: Server;\n  dispatch: Dispatch<Action>;\n  input?: WebMidi.MIDIInput;\n  timeouts: Map<number, number>;\n  pending_recording: boolean;\n  last_state: AppState;\n\n  constructor(state: AppState, dispatch: Dispatch<Action>, server: Server) {\n    this.last_state = state;\n    this.dispatch = dispatch;\n    this.server = server;\n    this.connect();\n    this.timeouts = new Map();\n    this.pending_recording = false;\n  }\n\n  private connect() {\n    if (!navigator.requestMIDIAccess) {\n      console.log('WebMidi is not supported');\n      return;\n    }\n    console.log('WebMidi enabled');\n    navigator.requestMIDIAccess({sysex: true}).then((a) => this.onaccess(a), () => this.onfailure());\n  }\n\n  private onaccess(access: WebMidi.MIDIAccess) {\n    let inputs = access.inputs;\n    if (inputs.size === 0) {\n      console.log('No MIDI devices detected.');\n    }\n    for (let entry of inputs.entries()) {\n      let input = entry[1];\n      if (!input.manufacturer) continue;\n      this.input = input;\n      input.onmidimessage = (m: WebMidi.MIDIMessageEvent) => this.onmessage(m);\n      return;\n    }\n  }\n\n  private onfailure() {\n    console.log('WebMidi access denied');\n  }\n\n  private onmessage(message: WebMidi.MIDIMessageEvent) {\n    let channel = message.data[1];\n    let value = message.data[2]*2;\n    if (channel > 8) {\n      if (value === 0) {\n        return;\n      }\n      if (this.pending_recording) {\n        if (channel === 45 || channel === 60) {\n          // record + record or record + marker set\n          this.server.save_cue(this.last_state.cue.current, this.last_state.cue.fade_time);\n        } else if (channel === 61) {\n          // record + marker left\n          this.server.save_cue(this.last_state.cue.current - 1, this.last_state.cue.fade_time);\n        } else if (channel === 62) {\n          // record + marker right\n          this.server.save_cue(this.last_state.cue.current + 1, this.last_state.cue.fade_time);\n        }\n        this.pending_recording = false;\n      } else {\n        if (channel === 41 || channel === 44) {\n          // play or forward\n          this.server.go();\n        }\n        if (channel === 42 || channel === 43) {\n          // stop or back\n          this.server.back();\n        }\n        if (channel === 45) {\n          // record\n          this.pending_recording = true;\n        }\n        if (channel >= 64 && channel <= 71) {\n          // R buttons\n          this.server.reset_channel(channel - 64);\n        }\n      }\n      return;\n    }\n    // this.dispatch({type: 'update_channel', value: {channel: channel, value: value, status: 'manual'}});\n    if (this.timeouts.has(channel)) {\n      clearTimeout(this.timeouts.get(channel));\n    }\n    this.timeouts.set(channel,\n      window.setTimeout(() => this.ontimeout(channel, value), 1)\n    );\n  }\n\n  private ontimeout(channel: number, value: number) {\n    this.server.set_level(channel, value);\n    this.timeouts.delete(channel);\n  }\n\n  public update_state(state: AppState) {\n    this.last_state = state;\n  }\n\n}\n","import React, {Dispatch} from 'react';\nimport './ListControls.css';\nimport Server from '../../server';\nimport Action, {CueList} from '../../action';\n\nexport type ListData = {\n  id: number,\n  name: string,\n  lists: CueList[]\n};\n\ntype ListControlProps = {\n  data: ListData;\n  dispatch: Dispatch<Action>;\n  server: Server;\n}\n\nexport default function ListControls({data, dispatch, server}: ListControlProps) {\n  let {id, name, lists} = data;\n  let list_ids = lists.map(x => x.id);\n  let free_id = 0;\n  while (list_ids.indexOf(free_id) !== -1) {\n    free_id++;\n  }\n  return (\n    <div className=\"list_controls\">\n      Cue List ({id + 1}/{lists.length}):&nbsp;&nbsp;\n      <select value={id} onChange={(e) => change_list(parseInt(e.target.value), dispatch)}>\n        {\n          lists.map(x => {\n            return <option key={x.id} value={x.id}>{x.name}</option>\n          })\n        }\n        <option value={free_id}>Add new...</option>\n      </select>\n      <button onClick={() => rename_list(id, name, server)}>Rename</button>\n      <button onClick={() => remove_list(id, name, list_ids, server, dispatch)}>Delete</button>\n    </div>\n  );\n}\n\nfunction change_list(list_id: number, dispatch: Dispatch<Action>) {\n  console.log(list_id);\n  dispatch({type: 'switch_list', id: list_id});\n}\n\nfunction rename_list(list_id: number, old_name: string, server: Server) {\n  let name = prompt(`Please enter a new name for this cue list (current is \"${old_name}\")`)\n  if (name !== null) {\n    server.rename_list(list_id, name);\n  }\n}\n\nfunction remove_list(list_id: number, name: string, list_ids: number[], server: Server, dispatch: Dispatch<Action>) {\n  let confirmation = window.confirm(`Are you sure you want to delete all the cues in \"${name}\"? This cannot be undone.`);\n  if (confirmation === true) {\n    server.delete_list(list_id);\n    dispatch({type: 'switch_list', id: 0});\n  }\n}\n","import React, {useReducer, useEffect, useRef, MutableRefObject} from 'react';\nimport './App.css';\nimport reducer from '../../reducer';\nimport Fader, {FaderData} from '../Fader/Fader';\nimport Server from '../../server';\nimport CueStatus, {CueStatusData} from '../CueStatus/CueStatus';\nimport Controller from '../../controller';\nimport ListControls, {ListData} from '../ListControls/ListControls';\n\n\n/**\n * The application's overall state.  Every piece of server-side state the application needs\n * is also saved in here somewhere, plus any top-level local state.  This\n * should probably be a union of \"Loading\", \"Active\", and \"Error\" states.\n */\nexport type AppState = {\n  connected: boolean,\n  cue: CueStatusData,\n  cues: number[],\n  faders: FaderData[],\n  lists: ListData,\n}\n\n/**\n * The initial state of the application.  This should probably put the\n * application in \"Loading\" state and wait for the server to provide the\n * initial data.\n */\nexport const initialState: AppState = {\n  connected: false,\n  cue: {\n    current: 0,\n    fade_time: 1,\n    fade_progress: 1,\n    fading: false,\n    last: 0,\n    next: 0,\n    previous: 0,\n  },\n  cues: [],\n  faders: [\n    {channel: 0, value: 0, status: 'manual'},\n    {channel: 1, value: 0, status: 'manual'},\n    {channel: 2, value: 0, status: 'manual'},\n    {channel: 3, value: 0, status: 'manual'},\n    {channel: 4, value: 0, status: 'manual'},\n    {channel: 5, value: 0, status: 'manual'},\n    {channel: 6, value: 0, status: 'manual'},\n    {channel: 7, value: 0, status: 'manual'},\n  ],\n  lists: {\n    id: 0,\n    name: \"N/A\",\n    lists: [],\n  }\n}\n\nexport default function App(_props: {}) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const server: MutableRefObject<Server | null> = useRef(null);\n  const controller: MutableRefObject<Controller | null> = useRef(null);\n  useEffect(() => {\n    server.current = new Server(dispatch, state.lists.id);\n    return () => {\n      server.current?.disconnect();\n    }\n  }, [state.lists.id]);\n\n  useEffect(() => {\n    if (server.current) {\n      controller.current = new Controller(initialState, dispatch, server.current as Server);\n    }\n  }, [server]);\n\n  if (server.current === null) {\n    return <div>Loading...</div>\n  } else if (!state.connected) {\n    return <div>Connecting...</div>\n  }\n  controller.current?.update_state(state);\n\n\n  const state_modified = state.faders.reduce((prev, current) => prev || current.status === \"manual\", false);\n\n  return (\n    <div className=\"App\">\n      <ListControls data={state.lists} server={server.current as Server} dispatch={dispatch}/>\n      <div className=\"FaderBank\">\n        {\n          state.faders.sort((a, b) => (a.channel > b.channel) ? 1 : -1).map((faderState: FaderData, i: number) => {\n            return <Fader key={i} state_modified={state_modified} data={faderState} dispatch={dispatch} server={server.current as Server}/>\n            })\n        }\n      </div>\n      <CueStatus data={state.cue} cues={state.cues} dispatch={dispatch} server={server.current as Server}/>\n      <button onClick={() => server.current?.save_to_disk()}>Save to Disk</button>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}